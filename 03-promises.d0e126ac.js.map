{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAiBtCF,EAAOG,iBAAiB,UAAU,SAAAC,G,kBAM9BC,YAAW,W,OArBQC,EAqBYC,EArBFC,EAqBKC,EApBdC,KAAKC,SAAW,GAE7BC,QAAQC,QAAQ,qBAAoCC,OAAfR,EAAS,QAAYQ,OAANN,EAAM,OAAKO,MACpE,SAAAC,G,OAASlB,EAAAmB,OAAOC,QAAQF,E,IAInBJ,QAAQO,OAAO,oBAAmCL,OAAfR,EAAS,QAAYQ,OAANN,EAAM,OAAKY,OAClE,SAAAC,G,OAASvB,EAAAmB,OAAOK,QAAQD,E,IAT9B,IAAuBf,EAAUE,C,GAqBiBC,GAC9Cc,QAAQC,IAAIf,GACZA,GAAagB,OAAOzB,EAAO0B,SAASC,KAAKX,M,EAP3CZ,EAAEwB,iBAIF,IAFA,IAAInB,EAAYgB,OAAOzB,EAAO0B,SAASlB,MAAMQ,OAEpCa,EAAI,EAAGA,GAAK7B,EAAO0B,SAASI,OAAOd,MAAOa,GAAK,EAACE,EAAAF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    return Promise.resolve(`Fulfilled Promose ${position} in ${delay}ms`).then(\n      value => Notify.success(value)\n    );\n    // Fulfill\n  } else {\n    return Promise.reject(`Rejected Promose ${position} in ${delay}ms`).catch(\n      error => Notify.failure(error)\n    );\n    // Reject\n  }\n}\n\nformEl.addEventListener('submit', e => {\n  e.preventDefault();\n\n  let callDelay = Number(formEl.elements.delay.value);\n\n  for (let i = 1; i <= formEl.elements.amount.value; i += 1) {\n    setTimeout(() => createPromise(i, callDelay), callDelay);\n    console.log(callDelay);\n    callDelay += Number(formEl.elements.step.value);\n  }\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","addEventListener","e","setTimeout","position","i","delay","callDelay","Math","random","Promise","resolve","concat","then","value","Notify","success","reject","catch","error","failure","console","log","Number","elements","step","preventDefault","i1","amount","_loop"],"version":3,"file":"03-promises.d0e126ac.js.map"}